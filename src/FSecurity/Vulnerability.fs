namespace FSecurity

open System
open System.Runtime.InteropServices
open System.Runtime.CompilerServices

/// Indicate the severity of a security vulnerability.
type Severity = Info | Medium | High

/// Represents a security vulnerability.
type Vulnerability =
  { /// Gets a short description of the vulnerability.
    Summary : string
    /// Gets a more thorough explination of the vulnerability.
    Description : string
    /// Gets the content of the response for which a vulnerability is signaled.
    ResponseContent : string
    /// Gets the payloads for which the vulnerability was triggered.
    Payloads : string seq
    /// Gets the severity of the vulnerability.
    Severity : Severity } with
  override this.ToString () = sprintf "[%A] %s: %s" this.Severity this.Description this.Summary
  /// Creates a vulnerability with all possible info.
  static member Create (desc, summary, response, severity, payloads) =
    { Description = desc; Summary = summary; ResponseContent = response; Severity = severity; Payloads = payloads }
  /// Creates a vulnerability with only a description.
  static member Create (desc) = Vulnerability.Create (desc, "", "", Medium, [])

  /// Creates a vulnerability but discards the response content.
  /// A summary from the request is created.
  [<CompiledName("CreateWithoutResponseContent")>]
  static member withoutRespContent summary desc severity payloads =
    { Description = desc
      Summary = summary
      ResponseContent = String.Empty
      Severity = severity
      Payloads = payloads }

  /// Creates a vulnerability with a Info severity.
  static member Info (desc, response, [<Optional>] payloads) =
    let payloads = Option.ofObj payloads |> Option.defaultValue Seq.empty
    Vulnerability.withoutRespContent response desc Info payloads
  /// Creates a vulnerability with a Medium severity.
  static member Medium (desc, response, [<Optional>] payloads) =
    let payloads = Option.ofObj payloads |> Option.defaultValue Seq.empty
    Vulnerability.withoutRespContent response desc Medium payloads
  /// Creates a vulnerability with a High severity.
  static member High (desc, response, [<Optional>] payloads) =
    Vulnerability.withoutRespContent response desc High payloads
  /// Creates a vulnerability (Medium) with a short XSS description.
  static member Xss (response, [<Optional>] payloads) =
    Vulnerability.Medium ("Possible XSS vulnerability", response, payloads)
  /// Creates a vulnerability (High) with a short SQL description.
  static member Sql (response, [<Optional>] payloads) =
    Vulnerability.High ("Possible SQL vulnerability", response, payloads)
  /// Creates a vulnerability (Info) with a short rate-limit description.
  static member Dos (response, [<Optional>] payloads) =
    Vulnerability.Medium ("Possible DOS vulnerability", response, payloads)
  /// Creates a vulnerability (High) with a short privilege escalation description.
  static member PrivilegeEscalation (response, [<Optional>] payloads) =
    Vulnerability.High ("Possible Privilege Escalation vulnerability", response, payloads)
  /// Creates a vulnerability (Medium) with a short insecure direct object reference description.
  static member InsecureDirectObjectReference (response, [<Optional>] payloads) =
    Vulnerability.Medium ("Possible Insecure Direct Object Reference vulnerability", response, payloads)
  /// Creates a vulnerability (Medium) with a short open redirection description.
  static member OpenRedirect (response, [<Optional>] payloads) =
    Vulnerability.Medium ("Possible Open Redirection vulnerability", response, payloads)
  /// Creates a vulnerability (Medium) with a short Cross-site request forgery description.
  static member CrossSiteRequestForgery (response, [<Optional>] payloads) =
    Vulnerability.Medium ("Possible Cross-site request forgery vulnerability", response, payloads)
  /// Creates a vulnerability (Info) with a info leakakge description.
  static member InfoLeakakge (response, [<Optional>] payloads) =
    Vulnerability.Info ("Possible leakage of information", response, payloads)

type Vuln = Vulnerability

/// Operations on the vulnerability type.
[<CompilationRepresentation(CompilationRepresentationFlags.ModuleSuffix)>]
module Vuln =
  /// Creates a vulnerability with only a description.
  let create desc = Vuln.Create desc
  /// Sets the summary of the vulnerability.
  let summary txt vuln = { vuln with Summary = txt }
  /// Sets the response content of the vulnerability.
  let response txt vuln = { vuln with ResponseContent = txt }
  /// Sets the payloads that triggered this vulnerability.
  let payloads ps vuln = { vuln with Payloads = ps }
  /// Sets the severity of this vulnerability.
  let severity s vuln = { vuln with Severity = s }
  /// Creates a vulnerability with a Info severity.
  let info desc response payloads = Vuln.Info (desc, response, payloads)
  /// Creates a vulnerability with a Medium severity.
  let medium desc response payloads = Vuln.Medium (desc, response, payloads)
  /// Creates a vulnerability with a High severity.
  let high desc response payloads = Vuln.High (desc, response, payloads)
  /// Creates a vulnerability (Medium) with a short XSS description.
  let xss response payloads = Vuln.Xss (response, payloads)
  /// Creates a vulnerability (High) with a short SQL description.
  let sql response payloads = Vuln.Sql (response, payloads)
  /// Creates a vulnerability (Info) with a short rate-limit description.
  let dos response payloads = Vuln.Dos (response, payloads)
  /// Creates a vulnerability (High) with a short privilege escalation description.
  let privilEscal response payloads = Vuln.PrivilegeEscalation (response, payloads)
  /// Creates a vulnerability (Medium) with a short insecure direct object reference description.
  let idor response payloads = Vuln.InsecureDirectObjectReference (response, payloads)
  /// Creates a vulnerability (Medium) with a short open redirection description.
  let openRedirect response payloads = Vuln.OpenRedirect (response, payloads)
  /// Creates a vulnerability (Medium) with a short Cross-site request forgery description.
  let csrf response payloads = Vuln.CrossSiteRequestForgery (response, payloads)
  /// Creates a vulnerability (Info) with a info leakakge description.
  let leakage response payloads = Vuln.InfoLeakakge (response, payloads)
  /// Format the vulnerabilities in a multi-line string.
  let format (xs : #seq<Vulnerability>) = String.Join (Environment.NewLine, xs)

/// Extensions on the vulnerability type for a dev-friendly C#-context.
[<Extension>]
type VulnerabilityExtensions () =
  /// Sets the summary of the vulnerability.
  [<Extension>]
  static member WithSummary (vuln, txt) = 
    if isNull txt then nullArg "txt"
    Vuln.summary txt vuln
  /// Sets the response content of the vulnerability.
  [<Extension>]
  static member WithResponseContent (vuln, txt) = 
    if isNull txt then nullArg "txt"
    Vuln.response txt vuln
  /// Sets the payloads that triggered this vulnerability.
  [<Extension>]
  static member WithPayloads (vuln, payloads) = 
    if isNull payloads then nullArg "payloads"
    Vuln.payloads payloads vuln
  /// Sets the severity of this vulnerability.
  [<Extension>]
  static member WithSeverity (vuln, severity) = Vuln.severity severity vuln